{
    "info": {
        "name": "GlobeTrotter API",
        "description": "Complete API collection for the GlobeTrotter travel planning backend",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "_postman_id": "globetrotter-api-collection",
        "version": {
            "major": 1,
            "minor": 0,
            "patch": 0
        }
    },
    "variable": [
        {
            "key": "baseUrl",
            "value": "http://localhost:8080/api/v1",
            "type": "string"
        },
        {
            "key": "accessToken",
            "value": "",
            "type": "string"
        },
        {
            "key": "userId",
            "value": "",
            "type": "string"
        },
        {
            "key": "tripId",
            "value": "",
            "type": "string"
        }
    ],
    "auth": {
        "type": "bearer",
        "bearer": [
            {
                "key": "token",
                "value": "{{accessToken}}",
                "type": "string"
            }
        ]
    },
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    ""
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [
                    ""
                ]
            }
        }
    ],
    "item": [
        {
            "name": "Authentication",
            "item": [
                {
                    "name": "Signup",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "if (pm.response.code === 201) {",
                                    "    const response = pm.response.json();",
                                    "    if (response.success && response.data) {",
                                    "        pm.collectionVariables.set('accessToken', response.data.access_token);",
                                    "        pm.collectionVariables.set('userId', response.data.user.id);",
                                    "    }",
                                    "}",
                                    "",
                                    "pm.test('Status code is 201', function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "pm.test('Response contains tokens', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.data).to.have.property('access_token');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"name\": \"Test User\",\n  \"email\": \"test@example.com\",\n  \"password\": \"testpassword123\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/signup",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "signup"
                            ]
                        },
                        "description": "Register a new user account"
                    },
                    "response": []
                },
                {
                    "name": "Login",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "if (pm.response.code === 200) {",
                                    "    const response = pm.response.json();",
                                    "    if (response.success && response.data) {",
                                    "        pm.collectionVariables.set('accessToken', response.data.access_token);",
                                    "        pm.collectionVariables.set('userId', response.data.user.id);",
                                    "    }",
                                    "}",
                                    "",
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Response contains tokens', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.data).to.have.property('access_token');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"testpassword123\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/login",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "login"
                            ]
                        },
                        "description": "Authenticate user with email and password"
                    },
                    "response": []
                }
            ],
            "description": "Authentication endpoints for user registration and login"
        },
        {
            "name": "User Management",
            "item": [
                {
                    "name": "Get User Profile",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Response contains user data', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.data).to.have.property('id');",
                                    "    pm.expect(jsonData.data).to.have.property('email');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/users/me",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "users",
                                "me"
                            ]
                        },
                        "description": "Get current user's profile information"
                    },
                    "response": []
                },
                {
                    "name": "Update User Profile",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"name\": \"Updated Test User\",\n  \"preferences\": {\n    \"language\": \"es\",\n    \"currency\": \"EUR\",\n    \"theme\": \"dark\"\n  }\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/users/me",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "users",
                                "me"
                            ]
                        },
                        "description": "Update current user's profile information"
                    },
                    "response": []
                },
                {
                    "name": "Upload Avatar",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Response contains avatar path', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.data).to.have.property('avatar_path');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "formdata",
                            "formdata": [
                                {
                                    "key": "avatar",
                                    "type": "file",
                                    "src": []
                                }
                            ]
                        },
                        "url": {
                            "raw": "{{baseUrl}}/users/avatar",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "users",
                                "avatar"
                            ]
                        },
                        "description": "Upload user avatar image"
                    },
                    "response": []
                },
                {
                    "name": "Delete User Account",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/users/me",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "users",
                                "me"
                            ]
                        },
                        "description": "Delete current user's account"
                    },
                    "response": []
                }
            ],
            "description": "User profile management endpoints"
        },
        {
            "name": "Trip Management",
            "item": [
                {
                    "name": "Get Public Trips",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Response contains paginated data', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.data).to.have.property('page');",
                                    "    pm.expect(jsonData.data).to.have.property('total_items');",
                                    "    pm.expect(jsonData.data).to.have.property('data');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/trips/public?page=1&limit=20&sort=newest",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "trips",
                                "public"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1"
                                },
                                {
                                    "key": "limit",
                                    "value": "20"
                                },
                                {
                                    "key": "sort",
                                    "value": "newest"
                                }
                            ]
                        },
                        "description": "Get paginated list of public trips"
                    },
                    "response": []
                },
                {
                    "name": "Create Trip",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "if (pm.response.code === 201) {",
                                    "    const response = pm.response.json();",
                                    "    if (response.success && response.data && response.data.id) {",
                                    "        pm.collectionVariables.set('tripId', response.data.id);",
                                    "    }",
                                    "}",
                                    "",
                                    "pm.test('Status code is 201', function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "pm.test('Response contains trip data', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.data).to.have.property('id');",
                                    "    pm.expect(jsonData.data).to.have.property('title');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"title\": \"Test Trip\",\n  \"description\": \"A test trip for API testing\",\n  \"privacy\": \"private\",\n  \"start_date\": \"2025-07-01T00:00:00Z\",\n  \"end_date\": \"2025-07-14T00:00:00Z\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/trips",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "trips"
                            ]
                        },
                        "description": "Create a new trip"
                    },
                    "response": []
                },
                {
                    "name": "Get User Trips",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Response contains paginated data', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.data).to.have.property('page');",
                                    "    pm.expect(jsonData.data).to.have.property('data');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/trips?page=1&limit=20",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "trips"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1"
                                },
                                {
                                    "key": "limit",
                                    "value": "20"
                                }
                            ]
                        },
                        "description": "Get current user's trips"
                    },
                    "response": []
                },
                {
                    "name": "Get Trip by ID",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Response contains trip data', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.data).to.have.property('id');",
                                    "    pm.expect(jsonData.data).to.have.property('title');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/trips/{{tripId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "trips",
                                "{{tripId}}"
                            ]
                        },
                        "description": "Get specific trip by ID"
                    },
                    "response": []
                },
                {
                    "name": "Update Trip",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"title\": \"Updated Test Trip\",\n  \"description\": \"An updated test trip for API testing\",\n  \"privacy\": \"public\",\n  \"start_date\": \"2025-07-01T00:00:00Z\",\n  \"end_date\": \"2025-07-21T00:00:00Z\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/trips/{{tripId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "trips",
                                "{{tripId}}"
                            ]
                        },
                        "description": "Update specific trip"
                    },
                    "response": []
                },
                {
                    "name": "Share Trip",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Response contains share data', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.data).to.have.property('share_token');",
                                    "    pm.expect(jsonData.data).to.have.property('share_url');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"expires_in_hours\": 168\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/trips/{{tripId}}/share",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "trips",
                                "{{tripId}}",
                                "share"
                            ]
                        },
                        "description": "Create public share link for trip"
                    },
                    "response": []
                },
                {
                    "name": "Duplicate Trip",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 201', function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "pm.test('Response contains new trip data', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.data).to.have.property('id');",
                                    "    pm.expect(jsonData.data).to.have.property('title');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/trips/{{tripId}}/duplicate",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "trips",
                                "{{tripId}}",
                                "duplicate"
                            ]
                        },
                        "description": "Create a copy of existing trip"
                    },
                    "response": []
                },
                {
                    "name": "Delete Trip",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/trips/{{tripId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "trips",
                                "{{tripId}}"
                            ]
                        },
                        "description": "Delete specific trip"
                    },
                    "response": []
                }
            ],
            "description": "Trip management endpoints for creating, reading, updating, and deleting trips"
        },
        {
            "name": "Health Check",
            "item": [
                {
                    "name": "Health Check",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Response contains status', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('status');",
                                    "    pm.expect(jsonData.status).to.equal('ok');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/health",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "health"
                            ]
                        },
                        "description": "Check API health status"
                    },
                    "response": []
                }
            ],
            "description": "Health check endpoint for monitoring"
        }
    ]
}